<?xml version="1.0" encoding="UTF-8"?>
<project name="QualiMaster.Extension" default="jar" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<!-- import von globalen Properties Einstellungen -->
	<property file="${user.home}/global-build.properties"/>
	<property file="${user.home}/qualimaster-build.properties"/>
    
    <include file="${user.home}/macros.xml"/>
	
	<!-- Einstellungen fuer dieses Projekt -->
	<property name="src.dir" value="src"/>
	<property name="javacSource" value="1.7"/>
	<property name="javacTarget" value="1.7"/>

	   <!-- Check - no typedef shall be required as installed in ANT/lib -->
    <path id="maven-ant-tasks.classpath" path="${ant-maven.lib}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
       uri="antlib:org.apache.maven.artifact.ant"
       classpathref="maven-ant-tasks.classpath" />
		
    <!-- THIS IS A HYBRID BUILD BETWEEN OSGI AND MAVEN/QM-INFRASTRUCTURE  -->
    
	<path id ="includes">
		<!-- Model -->
        <pathelement path="${libs.utils}"/>
        <pathelement path="${libs.libs.common.io}"/>
        <pathelement path="${libs.model}"/>
        <pathelement path="${libs.vil.core}"/>
        <pathelement path="${libs.template.core}"/>
        <!-- DSL core common classes -->
        <pathelement path="${libs.dslCore}"/>       
        <!-- Instantiation -->
        <pathelement path="${libs.instantiator.core}"/>
        <pathelement path="${libs.instantiator.velocity}"/>
        <pathelement path="${libs.instantiatorCore.rt.core}"/>
        <!-- EASy Core -->
        <pathelement path="${libs.easy.PLugin}"/>
        <pathelement path="${libs.easy.persistence}"/>
        <pathelement path="${libs.easy.persistence.eclipse}"/>
        <!-- IVML Core -->
        <pathelement path="${libs.ivml}"/>
        <!-- reasonerCore -->
        <pathelement path="${libs.reasonerCore}"/>
        <!-- VIL -->
		<pathelement path="${libs.vil.core}"/>
		<pathelement path="${libs.vil.ui}"/>
		<!-- Eclipse-Plugins -->
		<fileset dir="${eclipse.plugins.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<!-- Targets  -->
	<target name="init">
		<!-- Delete generated folders -->
		<delete dir="${build.base.dir}"/>
		
		<!-- Create folders -->
        <mkdir dir="${build.base.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${build.jar.dir}"/>
	
	    <maven pomFile="pom.xml" goal="compile"/> <!-- maven -U validate is not sufficient -->
        <artifact:dependencies pathId="maven.compile.classpath">
            <pom file="pom.xml" id="pom"/>
        </artifact:dependencies>
	</target>
	
	<!-- Compile all files without test classes -->
	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" debug="on" destdir="${build.classes.dir}" includeAntRuntime="no" failonerror="true" source="${javacSource}" target="${javacTarget}" encoding="${javac.encoding}">
            <classpath refid="includes" />	
            <classpath refid="maven.compile.classpath" />
        </javac>
    </target>
	
	<!-- Creates a jar file -->
	<target name="jar" depends="compile">
		<!--copy todir="${build.classes.dir}" failonerror="true" overwrite="true"/-->
		<jar destfile="${build.jar.dir}/${ant.project.name}.jar" basedir="${build.classes.dir}" manifest="META-INF/MANIFEST.MF">
            <fileset dir="${basedir}">
                <include name="OSGI-INF/**/*" />
                <include name="lib/**/*" />
                <include name="resources/**/*" />
            </fileset>
            <!-- as maven does -->
            <fileset dir="${basedir}/resources">
                <include name="*" />
            </fileset>
        </jar>    
		<!-- Copy created jar to global EASy Plug-ins directory - yes to EASy as it is an EASy extension -->
        <copy todir="${easy.bundles.dir}">
            <fileset dir="${build.jar.dir}" includes="**/*.jar"/>
        </copy>

        <jar destfile="${build.jar.dir}/${ant.project.name}-mvn.jar" basedir="${build.classes.dir}" manifest="META-INF/MANIFEST.MF">
            <fileset dir="${basedir}">
                <include name="OSGI-INF/**/*" />
            </fileset>
            <!-- as maven does -->
            <fileset dir="${basedir}/resources">
                <include name="*" />
            </fileset>
        </jar>    
        <mvnDeploy folderName="${ant.project.name}" jarFolder="${build.jar.dir}" jarFile="${ant.project.name}-mvn.jar"/>
    </target>
</project>
